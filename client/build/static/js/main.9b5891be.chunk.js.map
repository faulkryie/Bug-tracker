{"version":3,"sources":["actions/employeeAction.js","actions/sessionAction.js","session/LoginForm.js","components/EmployeeTable.js","components/Employee.js","components/LogoutButton.js","components/AdminDashboard.js","session/SignupForm.js","App.js","reducers/employeeReducer.js","reducers/sessionReducer.js","store/configureStore.js","index.js"],"names":["loadEmployees","employees","type","removeOneEmployee","employeeId","getEmployees","dispatch","a","fetch","res","json","console","log","loadSession","user","token","login","email","password","body","method","headers","JSON","stringify","Cookies","get","employee","signup","name","LoginForm","useDispatch","useState","setEmail","setPassword","loginUser","e","preventDefault","onSubmit","onChange","target","value","required","EmployeeTable","employeesArray","deleteEmployee","window","confirm","id","parsedEmployeeId","parseInt","ok","error","message","map","key","roleId","mapRoleIdToName","onClick","Employee","useSelector","state","selectedEmployeeId","setSelectedEmployeeId","roleToChange","setRoleToChange","Object","values","useEffect","length","htmlFor","LogoutButton","logoutUser","remove","AdminDashboard","className","SignupForm","setName","signupUser","ProtectedRoute","Component","component","rest","render","props","to","AuthRoute","App","exact","path","AppContainer","session","authToken","employeeReducer","nextState","action","assign","sessionReducer","currentUserId","role","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","storeEnhancer","applyMiddleware","thunk","store","initialState","createStore","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"2UAMaA,EAAgB,SAACC,GAAD,MAAgB,CACzCC,KAP0B,iBAQ1BD,cAQSE,EAAoB,SAACC,GAAD,MAAiB,CAC9CF,KAf+B,sBAgB/BE,eAISC,EAAe,yDAAM,WAAOC,GAAP,mBAAAC,EAAA,+EAERC,MAAM,UAFE,cAEpBC,EAFoB,gBAKEA,EAAIC,OALN,gBAKlBT,EALkB,EAKlBA,UACRK,EAASN,EAAcC,IANG,kDAQ1BU,QAAQC,IAAR,MAR0B,0DAAN,uDCdfC,EAAc,SAACC,EAAMC,GAAP,MAAkB,CACzCb,KAPwB,eAQxBY,OACAC,UAWSC,EAAQ,SAAEC,EAAOC,GAAT,8CAAuB,WAAOZ,GAAP,uBAAAC,EAAA,6DAElCY,EAAO,CACTF,QACAC,YAJoC,kBAUlBV,MAAM,WAAY,CAChCY,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBF,KAAMG,KAAKC,UAAUJ,KAfW,cAU9BV,EAV8B,OAmB9BM,EAAQS,IAAQC,IAAI,SAnBU,SAsBThB,EAAIC,OAtBK,gBAsB5BgB,EAtB4B,EAsB5BA,SAERpB,EAASO,EAAYa,EAAUX,IAxBK,kDA0BpCJ,QAAQC,IAAR,MA1BoC,0DAAvB,uDAsCRe,EAAS,SAAEC,EAAMX,EAAOC,GAAf,8CAA6B,WAAOZ,GAAP,uBAAAC,EAAA,6DAKzCY,EAAO,CACTS,OACAX,QACAC,YAR2C,kBAczBV,MAAM,SAAU,CAC9BY,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBF,KAAMG,KAAKC,UAAUJ,KAnBkB,cAcrCV,EAdqC,OAuBrCM,EAAQS,IAAQC,IAAI,SAvBiB,SA0BhBhB,EAAIC,OA1BY,gBA0BnCgB,EA1BmC,EA0BnCA,SAERpB,EAASO,EAAYa,EAAUX,IA5BY,kDA8B3CJ,QAAQC,IAAR,MA9B2C,0DAA7B,uD,OC5BPiB,EA3BG,WACd,IAAMvB,EAAWwB,cADG,EAEMC,mBAAS,qBAFf,mBAEbd,EAFa,KAENe,EAFM,OAGYD,mBAAS,aAHrB,mBAGbb,EAHa,KAGHe,EAHG,KAQdC,EAAS,uCAAG,WAAOC,GAAP,SAAA5B,EAAA,sDACd4B,EAAEC,iBACF9B,EAASU,EAAMC,EAAOC,IAFR,2CAAH,sDAKf,OACI,6BACI,0BAAMmB,SAAUH,GACZ,0CACA,2BAAOI,SAbC,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOC,QAaHZ,KAAK,QAAQ1B,KAAK,QAAQsC,MAAOvB,EAAOwB,UAAQ,IAC9E,2BAAOH,SAbI,SAACH,GAAD,OAAOF,EAAYE,EAAEI,OAAOC,QAaNZ,KAAK,WAAW1B,KAAK,WAAWsC,MAAOtB,EAAUuB,UAAQ,IAC1F,4BAAQvC,KAAK,UAAb,aC8BDwC,EAlDO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACfrC,EAAWwB,cAiBXc,EAAiB,SAACT,GHqCE,IAAC/B,EGpCnByC,OAAOC,QAAQ,+CACfxC,GHmCmBF,EGnCoB+B,EAAEI,OAAOQ,GHmC9B,uCAAgB,WAAOzC,GAAP,iBAAAC,EAAA,6DACpCyC,EAAmBC,SAAS7C,EAAY,IADJ,kBAGpBI,MAAM,UAAD,OAAWwC,GAAoB,CAClD5B,OAAQ,WAJ0B,WAGhCX,EAHgC,QAO7ByC,GAP6B,sBAQ5BzC,EAR4B,OAWtCH,EAASH,EAAkB6C,IAXW,kDAatCrC,QAAQwC,MAAM,KAAIC,SAboB,0DAAhB,yDG9B1B,OACI,+BACI,+BACI,4BACI,wCACA,oCACA,+BAGR,+BACKT,EAAeU,KAAI,SAAA3B,GAChB,OAAO,wBAAI4B,IAAK5B,EAASqB,IACrB,4BACKrB,EAASE,MAEd,4BAtCI,SAAC2B,GACrB,OAAQA,GACJ,KAAK,EACD,MAAO,QACX,KAAK,EACD,MAAO,kBACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,YACX,QACI,OAAO,MA2BMC,CAAgB9B,EAAS6B,SAC9B,4BAAI,4BAAQR,GAAIrB,EAASqB,GAAIU,QAASb,GAAlC,kBC6Bbc,EApEE,WACb,IAAMpD,EAAWwB,cACX7B,EAAY0D,aAAY,SAAAC,GAAK,OAAIA,EAAM3D,aAF1B,EAGiC8B,mBAAS,IAH1C,mBAGZ8B,EAHY,KAGQC,EAHR,OAIqB/B,mBAAS,IAJ9B,mBAIZgC,EAJY,KAIEC,EAJF,KAKbrB,EAAiBsB,OAAOC,OAAOjE,GAErCkE,qBAAU,WACN7D,EAASD,OACV,CAACC,IAoBJ,OAAIqC,EAAeyB,OAAS,EAEpB,6BACI,kDAEA,kBAAC,EAAD,CAAezB,eAAgBA,IACnC,0BAAMN,SAZO,SAACF,GJOQ,IAAC/B,EAAYmD,EINvCpB,EAAEC,iBACF9B,GJK2BF,EILCyD,EJKWN,EILSQ,EJKtB,uCAAwB,WAAOzD,GAAP,mBAAAC,EAAA,6DAChDyC,EAAmBC,SAAS7C,EAAY,IADQ,SAG5Ce,EAAO,CAAEoC,UAHmC,SAIhC/C,MAAM,UAAD,OAAWwC,GAAoB,CAClD5B,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBF,KAAMG,KAAKC,UAAUJ,KATyB,WAI5CV,EAJ4C,QAYzCyC,GAZyC,sBAaxCzC,EAbwC,OAgBlDH,EAASD,KAhByC,kDAkBlDM,QAAQwC,MAAM,KAAIC,SAlBgC,0DAAxB,0DIMlB,2BAAOiB,QAAQ,YAAf,yBACA,4BAAQ/B,SAzBK,SAACH,GACtB2B,EAAsB3B,EAAEI,OAAOC,QAwBaO,GAAG,WAAWnB,KAAK,WAAWY,MAAOqB,EAAoBpB,UAAQ,GACjG,4BAAQD,MAAM,GAAGc,KAAM,GAAvB,mBACCX,EAAeU,KAAI,SAAA3B,GAAQ,OACxB,4BAAQ4B,IAAK5B,EAASqB,GAAIP,MAAOd,EAASqB,IAAKrB,EAASE,UAKhE,4BAAQU,SA5BD,SAACH,GAChB6B,EAAgB7B,EAAEI,OAAOC,QA2BaO,GAAG,QAAQnB,KAAK,QAAQY,MAAOuB,EAActB,UAAQ,GAC/E,4BAAQD,MAAM,GAAGc,KAAM,GAAvB,eACA,4BAAQd,MAAO,EAAGc,IAAK,GAAvB,WACA,4BAAQd,MAAO,EAAGc,IAAK,GAAvB,SACA,4BAAQd,MAAO,EAAGc,IAAK,GAAvB,mBACA,4BAAQd,MAAO,EAAGc,IAAK,GAAvB,OACA,4BAAQd,MAAO,EAAGc,IAAK,GAAvB,cAIJ,4BAAQpD,KAAK,UAAb,YAMD,uDC/CAoE,EAfM,WACjB,IAAMhE,EAAWwB,cAGXyC,EAAU,uCAAG,WAAOpC,GAAP,SAAA5B,EAAA,sDACfD,GJ4CoB,SAACA,GACzBkB,IAAQgD,OAAO,SACflE,EAzCgC,CAChCJ,KAb0B,mBAsD1BI,ED7CkC,CAClCJ,KAZ4B,wBKQT,2CAAH,sDAIhB,OACI,6BACI,4BAAQuD,QAASc,EAAYrE,KAAK,UAAlC,YCKGuE,G,MAdQ,WACnB,OACI,6BACI,+CACA,6BACI,kBAAC,EAAD,OAEJ,yBAAKC,UAAU,sBACX,kBAAC,EAAD,UCwBDC,EAjCI,WACf,IAAMrE,EAAWwB,cADI,EAEGC,mBAAS,IAFZ,mBAEdH,EAFc,KAERgD,EAFQ,OAGK7C,mBAAS,IAHd,mBAGdd,EAHc,KAGPe,EAHO,OAIWD,mBAAS,IAJpB,mBAIdb,EAJc,KAIJe,EAJI,KAUf4C,EAAU,uCAAG,WAAO1C,GAAP,SAAA5B,EAAA,sDACf4B,EAAEC,iBACF9B,EAASqB,EAAQC,EAAMX,EAAOC,IAFf,2CAAH,sDAKhB,OACI,6BACI,0BAAMmB,SAAUwC,GACZ,4CACA,2BAAOR,QAAQ,QAAf,UACA,2BAAOtB,GAAG,OAAOT,SAfV,SAACH,GAAD,OAAOyC,EAAQzC,EAAEI,OAAOC,QAeQZ,KAAK,OAAO1B,KAAK,OAAOsC,MAAOZ,EAAMa,UAAQ,IACpF,2BAAO4B,QAAQ,SAAf,WACA,2BAAOtB,GAAG,QAAQT,SAhBV,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOC,QAgBQZ,KAAK,QAAQ1B,KAAK,QAAQsC,MAAOvB,EAAOwB,UAAQ,IACzF,2BAAO4B,QAAQ,YAAf,cACA,2BAAOtB,GAAG,WAAWT,SAjBV,SAACH,GAAD,OAAOF,EAAYE,EAAEI,OAAOC,QAiBQZ,KAAK,WAAW1B,KAAK,WAAWsC,MAAOtB,EAAUuB,UAAQ,IACxG,4BAAQvC,KAAK,UAAb,cCrBV4E,EAAiB,SAAC,GAA8C,IAAjCC,EAAgC,EAA3CC,UAAsBjE,EAAqB,EAArBA,MAAUkE,EAAW,qCACnE,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAS,SAACC,GAAD,OAAWpE,EAAQ,kBAACgE,EAAcI,GAAY,kBAAC,IAAD,CAAUC,GAAG,gBAKpEC,EAAY,SAAC,GAA8C,IAAjCN,EAAgC,EAA3CC,UAAsBjE,EAAqB,EAArBA,MAAUkE,EAAW,qCAC9D,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAS,SAACC,GAAD,OAAWpE,EAAQ,kBAAC,IAAD,CAAUqE,GAAG,qBAAuB,kBAACL,EAAcI,QAKrF,SAASG,EAAT,GAAuB,IAATvE,EAAQ,EAARA,MACZ,OACE,6BACE,yCACA,6BACE,kBAAC,IAAD,CAASqE,GAAG,UAAZ,SACA,kBAAC,IAAD,CAASA,GAAG,WAAZ,WACA,kBAAC,IAAD,CAASA,GAAG,oBAAZ,cAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAgBrE,MAAOA,EAAOwE,OAAK,EAACC,KAAK,mBAAmBR,UAAWP,IACvE,kBAAC,EAAD,CAAWc,OAAK,EAACxE,MAAOA,EAAOyE,KAAK,SAASR,UAAWnD,IACxD,kBAAC,EAAD,CAAWd,MAAOA,EAAOyE,KAAK,UAAUR,UAAWL,MAM3D,IAMec,EANM,WACnB,IAAM1E,EAAQ4C,aAAa,SAAAC,GAAK,OAAIA,EAAM8B,QAAQC,aAClD,OAAO,kBAACL,EAAD,CAAKvE,MAAOA,K,uBCnBN6E,EApBS,WAAyB,IACzCC,EADiBjC,EAAuB,uDAAf,GAAIkC,EAAW,uCAE5C,OAAOA,EAAO5F,MACV,ITXsB,iBSgBlB,OAJA2F,EAAY,GACZC,EAAO7F,UAAUoD,KAAK,SAAA3B,GACnB,OAAOmE,EAAUnE,EAASqB,IAAMrB,KAE5BmE,EACX,IThBwB,mBSiBpB,MAAO,GACX,ITjB2B,sBSoBvB,cAFAA,EAAY5B,OAAO8B,OAAO,GAAd9B,OAAA,IAAAA,CAAA,GAAsBL,KACjBkC,EAAO1F,YACjByF,EACX,QACI,OAAOjC,ICNAoC,EAXQ,WAAyB,IAAxBpC,EAAuB,uDAAf,GAAIkC,EAAW,uCAC3C,OAAOA,EAAO5F,MACV,ITPgB,eSQZ,OAAO+D,OAAO8B,OAAO,GAAI,CAAEE,cAAeH,EAAOhF,KAAKiC,GAAImD,KAAMJ,EAAOhF,KAAKyC,OAAQoC,UAAWG,EAAO/E,QAC1G,ITRkB,iBSSd,MAAO,GACX,QACI,OAAO6C,ICTjBuC,EAAmBtD,OAAOuD,sCAAwCC,IAElEC,EAAcC,YAAgB,CAChCtG,YACAyF,YAGEc,EAAgBL,EAAiBM,YAAgBC,MCJjDC,EDMiB,SAACC,GACpB,OAAOC,YACHP,EACAM,EACAJ,GCVMM,GAEdC,IAAS7B,OACP,kBAAC,IAAM8B,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,SAINM,SAASC,eAAe,W","file":"static/js/main.9b5891be.chunk.js","sourcesContent":["export const LOAD_EMPLOYEES = 'LOAD_EMPLOYEES'\nexport const REMOVE_EMPLOYEES = 'REMOVE_EMPLOYEES'\nexport const REMOVE_ONE_EMPLOYEE = 'REMOVE_ONE_EMPLOYEE'\n\n\n//actions\nexport const loadEmployees = (employees) => ({\n    type: LOAD_EMPLOYEES,\n    employees\n\n})\n\nexport const removeEmployees = () => ({\n    type: REMOVE_EMPLOYEES\n})\n\nexport const removeOneEmployee = (employeeId) => ({\n    type: REMOVE_ONE_EMPLOYEE,\n    employeeId\n})\n\n//thunk\nexport const getEmployees = () => async (dispatch) => {\n    try {\n        const res = await fetch('/users')\n\n        //logged in user\n        const { employees } = await res.json()\n        dispatch(loadEmployees(employees))\n    } catch (err) {\n        console.log(err)\n        //enventually will push into errors array in store\n    }\n}\n\n//thunk\nexport const updateEmployeeRole = (employeeId, roleId) => async (dispatch) => {\n    const parsedEmployeeId = parseInt(employeeId, 10)\n    try {\n        const body = { roleId }\n        const res = await fetch(`/users/${parsedEmployeeId}`, {\n            method: 'PUT',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n        })\n\n        if (!res.ok) {\n            throw res\n        }\n\n        dispatch(getEmployees())\n    } catch (err) {\n        console.error(err.message)\n        //enventually will push into errors array in store\n    }\n}\n\nexport const deleteEmployee = (employeeId) => async (dispatch) => {\n    const parsedEmployeeId = parseInt(employeeId, 10)\n    try {\n        const res = await fetch(`/users/${parsedEmployeeId}`, {\n            method: 'DELETE'\n        })\n\n        if (!res.ok) {\n            throw res\n        }\n\n        dispatch(removeOneEmployee(parsedEmployeeId))\n    } catch (err) {\n        console.error(err.message)\n        //enventually will push into errors array in store\n    }\n}","import Cookies from 'js-cookie'\nimport { removeEmployees } from './employeeAction'\nexport const LOAD_SESSION = 'LOAD_SESSION'   \nexport const REMOVE_SESSION = 'REMOVE_SESSION' \n\n\n\n//actions\nexport const loadSession = (user, token) => ({\n    type: LOAD_SESSION,\n    user, \n    token\n\n})\n\nexport const removeSession = () => ({\n    type: REMOVE_SESSION\n})\n\n\n//thunks\n//getState is also a param after dispatch -- check docs for more info\nexport const login = ( email, password ) => async (dispatch) => {    \n    //build a body for req\n    const body = {\n        email, \n        password\n    }\n\n    \n    //make a fetch call to db to login user\n    try{\n        const res = await fetch('/session', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n        \n        //grab current token\n        const token = Cookies.get('token')\n\n        //logged in user\n        const { employee } = await res.json()\n\n        dispatch(loadSession(employee, token))\n    } catch (err){\n        console.log(err)\n        //enventually will push into errors array in store\n    }\n    \n}\n\nexport const logout = () => (dispatch) => {\n    Cookies.remove('token')\n    dispatch(removeSession())\n    dispatch(removeEmployees())\n} \n\nexport const signup = ( name, email, password ) => async (dispatch) => {\n    //post req to /users\n    //dispatch load session \n\n    //build a body for req\n    const body = {\n        name,\n        email, \n        password\n    }\n\n    \n    //make a fetch call to db to login user\n    try{\n        const res = await fetch('/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n        \n        //grab current token\n        const token = Cookies.get('token')\n\n        //logged in user\n        const { employee } = await res.json()\n\n        dispatch(loadSession(employee, token))\n    } catch (err){\n        console.log(err)\n        //enventually will push into errors array in store\n    }\n\n}\n\n","import React, { useState } from 'react'\n//not using HOC container so don't need to import * from sessionAction to avoid namespce collision\nimport { login } from '../actions/sessionAction'\nimport { useDispatch } from 'react-redux';\n\nconst LoginForm = () => {\n    const dispatch = useDispatch()\n    const [email, setEmail] = useState('demo1@example.com')\n    const [password, setPassword] = useState('password1')\n    const updateEmail = (e) => setEmail(e.target.value)\n    const updatePassword = (e) => setPassword(e.target.value)\n\n    //handle submit\n    const loginUser = async (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n\n    return (\n        <div>\n            <form onSubmit={loginUser}>\n                <h2>login here</h2>\n                <input onChange={updateEmail} name='email' type='email' value={email} required />\n                <input onChange={updatePassword} name='password' type='password' value={password} required />\n                <button type='submit'>Submit</button>\n            </form>\n        </div>\n    )\n}\n\n\n\nexport default LoginForm","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport * as employeeAction from '../actions/employeeAction'\n\nconst EmployeeTable = ({ employeesArray }) => {\n    const dispatch = useDispatch()\n    const mapRoleIdToName = (roleId) => {\n        switch (roleId) {\n            case 1:\n                return 'admin'\n            case 2:\n                return 'project manager'\n            case 3:\n                return 'dev'\n            case 4:\n                return 'submitter'\n            default:\n                return null\n\n        }\n    }\n\n    const deleteEmployee = (e) => {\n        if (window.confirm('Are you sure you wish to delete this item?')){\n            dispatch(employeeAction.deleteEmployee(e.target.id))\n        }\n        return\n    }\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Employee</th>\n                    <th>Role</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {employeesArray.map(employee => {\n                    return <tr key={employee.id}>\n                        <td>\n                            {employee.name}\n                        </td>\n                        <td>{mapRoleIdToName(employee.roleId)}</td>\n                        <td><button id={employee.id} onClick={deleteEmployee}>Delete</button></td>\n                    </tr>\n                }\n                )}\n            </tbody>\n        </table>\n    )\n}\n\nexport default EmployeeTable; ","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getEmployees } from '../actions/employeeAction'\nimport EmployeeTable from './EmployeeTable'\nimport { updateEmployeeRole } from '../actions/employeeAction'\n\nconst Employee = () => {\n    const dispatch = useDispatch()\n    const employees = useSelector(state => state.employees)\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState('')\n    const [roleToChange, setRoleToChange] = useState('')\n    const employeesArray = Object.values(employees)\n\n    useEffect(() => {\n        dispatch(getEmployees())\n    }, [dispatch])\n\n    //hanldle selected employee\n    const selectedEmployee = (e) => {\n        setSelectedEmployeeId(e.target.value)\n    }\n\n    //handle role change \n    const roleChange = (e) => {\n        setRoleToChange(e.target.value)\n    }\n    // console.log('selectedEmployeeId', selectedEmployeeId)\n    // console.log('roleToChange', roleToChange)\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        dispatch(updateEmployeeRole(selectedEmployeeId, roleToChange))\n    }\n\n    // console.log(Object.values(employees))\n    if (employeesArray.length > 0) {\n        return (\n            <div>\n                <h1>employee component</h1>\n\n                <EmployeeTable employeesArray={employeesArray}/>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor='employee'>Edit Employee Roles: </label>\n                <select onChange={selectedEmployee} id='employee' name='employee' value={selectedEmployeeId} required>\n                    <option value='' key={-1}>Select Employee</option>\n                    {employeesArray.map(employee => (\n                        <option key={employee.id} value={employee.id}>{employee.name}</option>\n                        \n                    ))\n                    }\n                </select>\n                <select onChange={roleChange} id='roles' name='roles' value={roleToChange} required>\n                    <option value='' key={-1}>Select Role</option>\n                    <option value={0} key={0}>no role</option>\n                    <option value={1} key={1}>admin</option>\n                    <option value={2} key={2}>project manager</option>\n                    <option value={3} key={3}>dev</option>\n                    <option value={4} key={4}>submitter</option>\n                    \n                    \n                </select>\n                <button type='submit'>Submit</button>\n            </form>\n                \n            </div>\n        )\n    } else {\n        return <h2>no employees available</h2>\n    }\n\n\n\n}\n\nexport default Employee;","import React from 'react'\n//not using HOC container so don't need to import * from sessionAction to avoid namespce collision\nimport { logout } from '../actions/sessionAction'\nimport { useDispatch } from 'react-redux';\n\nconst LogoutButton = () => {\n    const dispatch = useDispatch()\n\n    //handle click\n    const logoutUser = async (e) => {\n        dispatch(logout())\n    }\n\n    return (\n        <div>\n            <button onClick={logoutUser} type='submit'>Logout</button>\n        </div>\n    )\n}\n\nexport default LogoutButton; ","import React from 'react'\nimport Employee from './Employee'\nimport LogoutButton from './LogoutButton'\nimport '../adminDashboard.css';\n\n\nconst AdminDashboard = () => {\n    return (\n        <div>\n            <h1>admin dashboard</h1>\n            <nav>\n                <LogoutButton />\n            </nav>\n            <div className='employee-container'>\n                <Employee />\n            </div>\n        </div>\n    )\n}\n\nexport default AdminDashboard; ","import React, { useState } from 'react'\n//not using HOC container so don't need to import * from sessionAction to avoid namespce collision\nimport { signup } from '../actions/sessionAction'\nimport { useDispatch } from 'react-redux';\n\nconst SignupForm = () => {\n    const dispatch = useDispatch()\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const updateName = (e) => setName(e.target.value)\n    const updateEmail = (e) => setEmail(e.target.value)\n    const updatePassword = (e) => setPassword(e.target.value)\n\n    //handle submit\n    const signupUser = async (e) => {\n        e.preventDefault()\n        dispatch(signup( name, email, password ))\n    }\n\n    return (\n        <div>\n            <form onSubmit={signupUser}>\n                <h2>Sign Up here</h2>\n                <label htmlFor='name'>Name: </label>\n                <input id='name' onChange={updateName} name='name' type='name' value={name} required />\n                <label htmlFor='email'>Email: </label>\n                <input id='email' onChange={updateEmail} name='email' type='email' value={email} required />\n                <label htmlFor='password'>password: </label>\n                <input id='password' onChange={updatePassword} name='password' type='password' value={password} required />\n                <button type='submit'>Sign Up</button>\n            </form>\n        </div>\n    )\n}\n\n\n\nexport default SignupForm; ","import React from 'react';\nimport { Switch, NavLink, Route, Redirect } from 'react-router-dom'\nimport LoginForm from './session/LoginForm'\nimport AdminDashboard from './components/AdminDashboard'\nimport { useSelector } from 'react-redux';\nimport SignupForm from './session/SignupForm';\n\n//rest encapsulates path and exact being passed down\n//redirect user if not logged in\nconst ProtectedRoute = ({ component: Component, token, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={ (props) => token ? <Component {...props} /> : <Redirect to='/login'/> }\n    />\n  )\n}\n//if user is logged in, redirect user back to dashboard\nconst AuthRoute = ({ component: Component, token, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={ (props) => token ? <Redirect to='/admin/dashboard'/> : <Component {...props} /> }\n    />\n  )\n}\n\nfunction App({token}) {\n  return (\n    <div>\n      <h1>Trackerfy</h1>\n      <nav>\n        <NavLink to='/login' >Login</NavLink>\n        <NavLink to='/signup' >Sign Up</NavLink>\n        <NavLink to='/admin/dashboard' >Dashboard</NavLink>\n      </nav>\n      <Switch>\n        <ProtectedRoute token={token} exact path='/admin/dashboard' component={AdminDashboard} />\n        <AuthRoute exact token={token} path='/login' component={LoginForm} />\n        <AuthRoute token={token} path='/signup' component={SignupForm}/>\n      </Switch>\n    </div>\n  );\n}\n\nconst AppContainer = () => {\n  const token = useSelector( state => state.session.authToken )\n  return <App token={token}/>\n  \n}\n\nexport default AppContainer;\n","import {\nLOAD_EMPLOYEES, \nREMOVE_EMPLOYEES,\nREMOVE_ONE_EMPLOYEE\n} from '../actions/employeeAction'\n\n\n//reducer\nconst employeeReducer = (state = {}, action) => {\n    let nextState;\n    switch(action.type){\n        case LOAD_EMPLOYEES: \n            nextState = {}\n            action.employees.map( employee => {\n               return nextState[employee.id] = employee\n            })\n            return nextState\n        case REMOVE_EMPLOYEES: \n            return {}\n        case REMOVE_ONE_EMPLOYEE: \n            nextState = Object.assign({}, {...state})\n            delete nextState[action.employeeId]\n            return nextState\n        default: \n            return state\n    }\n}\n\nexport default employeeReducer\n\n","import {\n    LOAD_SESSION, \n    REMOVE_SESSION\n    } from '../actions/sessionAction'\n    \n    \n    //reducer\n    const sessionReducer = (state = {}, action) => {\n        switch(action.type){\n            case LOAD_SESSION: \n                return Object.assign({}, { currentUserId: action.user.id, role: action.user.roleId, authToken: action.token })\n            case REMOVE_SESSION: \n                return {}\n            default: \n                return state\n        }\n    }\n    \n    export default sessionReducer","import { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport employees from '../reducers/employeeReducer'\nimport session from '../reducers/sessionReducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst rootReducer = combineReducers({\n    employees,\n    session\n})\n\nconst storeEnhancer = composeEnhancers(applyMiddleware(thunk))\n\nconst configureStore = (initialState) => {\n    return createStore(\n        rootReducer,\n        initialState,\n        storeEnhancer\n    )\n}\n\nexport default configureStore; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}